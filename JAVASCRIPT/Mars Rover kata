//Crear matriz bidimensional.

function myArray(columns, rows) {
	let matrix = [];
	for (let i = 0; i < columns; i++) {
		matrix[i] = new Array(rows);
	}
	return matrix;
}

let myMatrix = myArray(10, 10);

console.log(myMatrix);

travelLog = [];
// Create an object to represent the rover. This object will have only one property for now: the direction ("N").
  rover = {
	direction: "N",
  position: [0, 0],
}

//Your job is to turn the rover in the appropriate direction based off of its current direction. Opto por switch y un case para cada giro.
function turnLeft(rover){
  console.log("turnLeft was called!");
 
 switch (roverdirection) {
		case "N":
      turn = "left";
			roverdirection = "W";
			break;

		case "W":
      turn = "left";
			roverdirection = "S";
			break;

		case "S":
      turn = "left";
			roverdirection = "E";
			break;

		case "E":
      turn = "left";
			roverdirection = "N";
			break;
	}
  console.log(rover);
}

function turnRight(rover){
  console.log("turnRight was called!");
  switch (roverdirection) {
		case "N":
      t			turn = "right";
			roverdirection = "E";
			break;

		case "E":
      			turn = "right";
			roverdirection = "S";
			break;

		case "S":
      			turn = "right";
			roverdirection = "W";
			break;

		case 'W':
      			turn = "right";
			roverdirection = "N";
			break;
	}

  console.log(rover);
}
/*Moving forward is a function of the rover’s current direction, and the movement forward.

For instance, if the Rover is facing west and moves forward, we would decrease the Rover’s x by 1.

If the rover is facing north and moves forward, we would decrease the rover’s y by 1.

If the rover is facing south and moves forward, we would increase the y by 1.*/

function moveForward(rover){
  console.log("moveForward was called")
  switch (roverdirection) {
		case "N":
			roverposition[0] = roverposition[0] - 1;
			break;

		case "E":
			roverposition[1] = roverposition[1] + 1;
			break;

		case "S":
			roverposition[0] = roverposition[0] + 1;
			break;

		case "W":
			roverposition[1] = roverposition[1] - 1;
			break;
   
   }
    console.log(rover);
}
/*After each move, push the coordinates of the previous space to the travelLog array. After the rover has finished its moves, print out all of the spaces the rover has traveled over.*/
function Tracking(commands) {
	if (roverposition[0] < 0 && roverposition[0] >= 10) {
		console.log("Siendo una esfera... " + movimiento);
		roverposition[0] = 0;
	}
	if (roverposition[1] < 0) {
		console.log("Siendo una esfera... " + movimiento);
		roverposition[1] = 0;
	travelLog.push("la rover avanzó, su posición ahora es: " + roverposition)}
	else {travelLogTracking();
	}


function travelLogMovimiento() {
	travelLog.push("la rover avanzó, su posición ahora es: " + roverposition
	);
}
	
}

function travelLogTurn() {
	travelLog.push(
		"La rover giró " +
			turn +
			", y su dirección es: " +
			roverdirection
	);
}
//Create a function that receives a list of commands. These commands will be the first letter of either (f)orward, (r)ight, or (l)eft.
function turnMove() {
	switch (turn) {
		case "left":
			turnLeft();
			break;

		case "right":
			turnRight();
			break;
      travelLogTurn();
}

	
}
function commands(turnRight) {
	for (let i = 0; i < command.length; i++) {
		switch (command[i]) {
			case "f":
				moveForward();
				break;

			case "r":
				turn = "right";
				turning();
				break;

			case "l":
				turn = "left";
				turning();
				break;
        
		}
	}
  console.log(commands)
}


